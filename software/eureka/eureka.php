<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

  <head>
   <meta name="keywords" content="university of genova, university of napoli,
      artificial intelligence, automated verification,
      formal methods, software model checking, eureka, smt"/>
     <title>Eureka: Model Checking Programs Manipulating Numerical Data and Arrays</title>
     <link href="style.css" type="text/css" rel="stylesheet"/>
  </head>

<body>

  <h1>Eureka: Model Checking Programs Manipulating Numerical Data and Arrays</h1>

<p>
  Eureka is a model checker for programs manipulating numerical data and arrays.  Eureka leverages the Counterexample-guided Abstraction
  Refinement (CEGAR) paradigm as well as a novel abstraction technique tailored to reason about arrays.
  Eureka is the result of a joint effort of the <a href="http://www.ai-lab.it" target="_parent">AI-Lab</a> at the <a href="http://www.unige.it" target="_parent">University of Genova</a> and the <a href="http://cs.na.infn.it" target="_parent">Section of
	Computer Science</a>, <a href="http://www.na.infn.it/dipartimento/dipartimento.asp?l=en" target="_parent">Physical Sciences Department</a> at the <a href="http://www.unina.it" target="_parent">University of Napoli "Federico II"</a>.
  Eureka has been partly supported by the <a href="http://www.miur.it" target="_parent">Italian Ministry of University and Research</a>, in the context of the <a href="http://profs.sci.univr.it/~bonacina/prin2003.html" target="_parent">PRIN Project no. 2003-097383</a>.
</p>

  <h2>Overview</h2>
  <p>
<img src="images/cegar-loop.jpg" alt="The CEGAR Loop" width="40%" style="float:right;"/>
Counterexample-guided Abstraction Refinement based on predicate abstraction is one of the leading approaches to software verification.  The key idea is to abstract the input program into a Boolean Program (i.e. a program whose variables range over the Boolean values only and model the truth values of predicates corresponding to properties of the program state), and refinement searches for new predicates in order to build a new, more refined abstraction.      
However, the effectiveness of predicate abstraction refinement on programs that involve a tight interplay between data-flow and control-flow is still to be ascertained.  Eureka implements a novel CEGAR procedure for Linear Programs with arrays, a fragment of the C programming language where variables and array elements range over a numeric domain and expressions involve linear combinations of variables and array elements.  In Eureka the input program is abstracted w.r.t. a family of sets of array indices, the abstraction is a Linear Program (without arrays), and refinement searches for new array indices. We use Linear Programs as the target of the abstraction (instead of Boolean programs) as they allow to express complex correlations between data and control.  Thus, unlike the tools based on predicate abstraction, Eureka treats arrays precisely.  This is an important feature as arrays are ubiquitous in programming.</p>

<h2>The Eureka Tool</h2>

<p>
Eureka supports reasoning about numberical data and arrays as well as a wide range of features occurring in modern imperative languages, including (arbitrarily nested) loops, non-determinism, procedure calls and recursion.  If an error is found, Eureka exhibits an error trace, i.e. a sequence of statements whose execution leads to an assertion violation.  Eureka currently does not support the analysis of programs with pointers, dynamically allocated arrays, bit-level constructs, unbounded arrays or arrays with symbolic dimensions.  </p>

<p><img src="images/cegar-loop-with-tools.jpg" alt="Architectural View of Eureka" width="40%" style="float:right;"/>
The architecture of Eureka is depicted in the figure on the right.  The Model Checking procedure analyses Linear Programs (without arrays) by treating arithmetic natively.  This is done by leveraging the powerful functionalities of the <a href="http://bugseng.com/products/ppl">Parma Polyhedra Library</a> (PPL).  By using the PPL sets of reachable states are represented and efficiently handled by PPL as polyhedra.

Whenever the model checker finds an error trace in the abstract program, then the Simulate module builds a formula whose satisifability corresponds to the executability of the same trace in the original program.  The feasibility of the formula is then checked by invoking an SMT-solver.  Eureka uses <a href="http://www.cs.nyu.edu/acsys/cvc3/">CVC Lite</a> to this end.  If the formula is found to be satisfiable, then Eureka terminates and reports the error trace.  Otherwise, the proof of unsatisfiability generated by CVC Lite is inspected to determine a set of array indexes to be used to refine the abstract program.
This step is such that the new, abstract program is is more precise than the previous abstraction and does not contain the spurious error trace found by the Model Checking phase. 
</p>


<h2>Experimental Evalutation</h2>

We have run Eureka and a number of state-of-the-art software model
checkers (<a href="http://mtc.epfl.ch/software-tools/blast/index-epfl.php">Blast</a>, <a href="http://www.cprover.org/satabs/">SATABS</a>, and <a href="http://cpachecker.sosy-lab.org/">CPAchecker</a>) against a variety of problems that involve reasoning on arithmetics and/or arrays.  This allowed us to comparatively evaluate the effectiveness of the software model checking procedures implemented in the tools.  

A detailed description of benchmarks and of the experimental evaluation can be found in this <a href="http://www.ai-lab.it/armando/pub/AUSE2013.pdf">paper</a>.  The benchmarks and the log files generated by the tools during the experiments can be downloaded from this <a href="experiments.zip">link</a>.

<h2>Publications</h2>

 
  
  <h2>People</h2>
  The following people contributed to the development of Eureka:
  <ul>
    <li> <a href="http://www.ai-lab.it/armando" target="_parent">Alessandro Armando</a>, Associate Professor, University of Genova.</li>
    <li> <a href="http://people.na.infn.it/~bene/" target="_parent">Massimo Benerecetti</a>, Associate Professor, University of Napoli.</li>
    <li> <a href="http://www.ai-lab.it/jacopo" target="_parent">Jacopo Mantovani</a>, PhD Student, University of Genova. </li>
    <li> Claudio Castellini, PostDoc, University of Genova. </li>
    <li> Dario Carotenuto, PhD Student, University of Napoli. </li>
    <li> Pasquale Spica, PhD Student, University of Napoli. </li>
    <li> Dario Della Monica, MsC Student, University of Napoli. </li>
    <li> Fulvio Polito, MsC Student, University of Napoli. </li>
    <li> Andrea Campagnuolo, MsC Student, University of Napoli. </li>
    <li> Ciro Cascella, MsC Student, University of Napoli. </li>
  </ul>

  </body>

</html>
